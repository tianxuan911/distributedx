<beans xmlns="http://www.springframework.org/schema/beans"  
 xmlns:context="http://www.springframework.org/schema/context"
 xmlns:p="http://www.springframework.org/schema/p"  
 xmlns:mvc="http://www.springframework.org/schema/mvc"  
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xmlns:tx="http://www.springframework.org/schema/tx"
 xsi:schemaLocation="http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
      http://www.springframework.org/schema/context  
      http://www.springframework.org/schema/context/spring-context.xsd  
      http://www.springframework.org/schema/mvc  
      http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
      http://www.springframework.org/schema/tx
      http://www.springframework.org/schema/tx/spring-tx-4.1.xsd">
     <!-- 启动注解驱动的Spring MVC功能，注册请求url和注解POJO类方法的映射-->  
     <mvc:annotation-driven />  
     <mvc:default-servlet-handler />
  	
  	  <!-- 配置参考-->
	  <!--<mvc:resources mapping="/common/**" location="/common/" />-->
	  <!--<mvc:resources mapping="/images/**" location="/images/" />-->
	  <!--<mvc:resources mapping="/img/**" location="/img/" />-->
	  <!--<mvc:resources mapping="/js/**" location="/WEB-INF/js/" />-->
	  <!--<mvc:resources mapping="/js/**" location="/webapp/WEB-INF/js/" />-->
  	
     <!-- 启动包扫描功能，以便注册带有@Controller、@Service、@repository、@Component等注解的类成为spring的bean -->  
     <context:component-scan base-package="com.tx.controller, com.tx.service" />
     
      <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="10000000000000" />
	</bean>

     <!-- 通过扫描的模式, 所有的mapper都继承SqlMapper接口的接口， 这样一个bean就可以了 -->
   	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
       	<property name="basePackage" value="cn.sandwish.trademark.*.dao,cn.sandwish.common.*.dao,cn.sandwish.trademarkbase.dao"/>
       	<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/> 
   	</bean>
     
     <!-- 对模型视图名称的解析，在请求时模型视图名称添加前后缀 -->  
     <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" p:prefix="/WEB-INF/jsp/" p:suffix=".jsp" /> 
     
     <context:property-placeholder location="classpath*:jdbc.properties" />
     
     <bean id="dataSource" destroy-method="close"
		class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${mysql.jdbc.driverClassName}"/>
		<property name="url" value="${mysql.jdbc.url}"/>
		<property name="username" value="${mysql.jdbc.username}"/>
		<property name="password" value="${mysql.jdbc.password}"/>
		<property name="maxActive" value="${mysql.jdbc.maxActive}"/>
		<property name="maxIdle" value="${mysql.jdbc.maxIdle}"/>
		<property name="maxWait" value="${mysql.jdbc.maxWait}"/>
		<property name="testWhileIdle" value="true"/>
		<property name="validationQuery" value="SELECT 1"/>
		<property name="minEvictableIdleTimeMillis" value="3600000"/>
		<property name="timeBetweenEvictionRunsMillis" value="600000"/>
		<property name="numTestsPerEvictionRun" value="${mysql.jdbc.maxActive}"/>
	</bean>
	<!-- 配置mybitasSqlSessionFactoryBean -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
	</bean>
	<!-- transaction support-->
	<!-- PlatformTransactionMnager -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- enable transaction annotation support -->
	<tx:annotation-driven transaction-manager="txManager" />
	<!-- 线程池配置消费者 -->
	<bean id="threadPoolTaskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<!-- 核心线程数，默认为1 -->
		<property name="corePoolSize" value="5000" />
		<!-- 最大线程数，默认为Integer.MAX_VALUE -->
		<property name="maxPoolSize" value="10000" />
		<!-- 队列最大长度，一般需要设置值>=notifyScheduledMainExecutor.maxNum；默认为Integer.MAX_VALUE
        <property name="queueCapacity" value="1000" /> -->
		<!-- 线程池维护线程所允许的空闲时间，默认为60s -->
		<property name="keepAliveSeconds" value="300" />
		<!-- 线程池对拒绝任务（无线程可用）的处理策略，目前只支持AbortPolicy、CallerRunsPolicy；默认为后者 -->
		<property name="rejectedExecutionHandler">
		<!-- AbortPolicy:直接抛出java.util.concurrent.RejectedExecutionException异常 -->
		<!-- CallerRunsPolicy:主线程直接执行该任务，执行完之后尝试添加下一个任务到线程池中，可以有效降低向线程池内添加任务的速度 -->
		<!-- DiscardOldestPolicy:抛弃旧的任务、暂不支持；会导致被丢弃的任务无法再次被执行 -->
		<!-- DiscardPolicy:抛弃当前任务、暂不支持；会导致被丢弃的任务无法再次被执行 -->
		<bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy" />
		</property>
	</bean>

	<!-- 线程池配置生产者 -->
	<bean id="threadPoolTaskExecutorProductor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<!-- 核心线程数，默认为1 -->
		<property name="corePoolSize" value="50" />
		<!-- 最大线程数，默认为Integer.MAX_VALUE -->
		<property name="maxPoolSize" value="1000" />
		<!-- 队列最大长度，一般需要设置值>=notifyScheduledMainExecutor.maxNum；默认为Integer.MAX_VALUE
        <property name="queueCapacity" value="1000" /> -->
		<!-- 线程池维护线程所允许的空闲时间，默认为60s -->
		<property name="keepAliveSeconds" value="300" />
		<!-- 线程池对拒绝任务（无线程可用）的处理策略，目前只支持AbortPolicy、CallerRunsPolicy；默认为后者 -->
		<property name="rejectedExecutionHandler">
			<!-- AbortPolicy:直接抛出java.util.concurrent.RejectedExecutionException异常 -->
			<!-- CallerRunsPolicy:主线程直接执行该任务，执行完之后尝试添加下一个任务到线程池中，可以有效降低向线程池内添加任务的速度 -->
			<!-- DiscardOldestPolicy:抛弃旧的任务、暂不支持；会导致被丢弃的任务无法再次被执行 -->
			<!-- DiscardPolicy:抛弃当前任务、暂不支持；会导致被丢弃的任务无法再次被执行 -->
			<bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy" />
		</property>
		<property name="threadGroup" value="TmWebCrawlertx"></property>
	</bean>
</beans>